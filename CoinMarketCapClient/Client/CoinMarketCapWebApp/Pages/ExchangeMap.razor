@page "/ExchangeMap"
@using CoinMarketCapWebApp.Infrastructure.Services
@using static CoinMarketCapWebApp.Infrastructure.Models.CryptoApiModels


<h1 class="text-3xl font-bold text-center my-6 text-gray-800">Crypto Exchange Map</h1>

<!-- Filtreleme Alanı -->
<div class="bg-gray-100 p-4 rounded-lg shadow-md mb-6 flex flex-col md:flex-row gap-4">
    <div class="flex-grow">
        <label class="block text-sm font-medium text-gray-700">Listing Status:</label>
        <select @bind="query.ListingStatus" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="untracked">Untracked</option>
        </select>
    </div>

    <div class="flex-grow">
        <label class="block text-sm font-medium text-gray-700">Sort By:</label>
        <select @bind="query.Sort" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
            <option value="id">ID</option>
            <option value="volume_24h">24h Volume</option>
        </select>
    </div>

<div class="flex-grow">
		<label class="block text-sm font-medium text-gray-700">Limit:</label>
		<input type="number" @bind="query.Limit" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
	</div>
</div>

@if (exchangeData == null)
{
    <p class="text-center text-gray-500">Loading exchange data...</p>
}
else if (exchangeData.Count == 0)
{
    <p class="text-center text-gray-500">No exchanges found.</p>
}
else
{
    <div class="grid md:grid-cols-3 sm:grid-cols-2 grid-cols-1 gap-6 px-4">
        @foreach (var exchange in exchangeData)
        {
            <div class="bg-white shadow-lg rounded-lg p-6 hover:shadow-2xl transition duration-300">
                <h2 class="text-xl font-semibold text-gray-800">@exchange.Slug</h2>
                <p class="text-gray-600">Status: @(exchange.ListingStatus == "active" ? "✅ Active" : "❌ Inactive")</p>
                <p class="text-gray-600">Limit: @exchange.Limit</p>
            </div>
        }
    </div>
}








@code {

    private ExchangeInfo query = new();
	private List<ExchangeInfo>? exchangeData;

	
	[Inject]
	private CoinMarketCapService? CoinMarketCapService { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CoinMarketCapService.GetExchangeListingsAsync();
	}




}
